{"version":3,"sources":["QuoteBox.js","QuoteControls.js","TweetQuote.js","Quote.js","QuoteHeader.js","api.js","App.js","serviceWorker.js","index.js"],"names":["QuoteBox","props","id","children","QuoteControls","type","onClick","handleClick","disabled","busy","text","getTweetLink","quote","obj","query","encodeURIComponent","en","author","url","window","location","href","hashtags","via","Object","keys","reduce","a","e","push","join","TweetQuote","link","tweet","target","rel","className","Quote","QuoteHeader","useQuotesApi","key","initialState","useState","JSON","parse","localStorage","getItem","value","setValue","useEffect","setItem","stringify","useSemiPersistentState","setQuote","error","setError","isLoading","setIsLoading","useCallback","Promise","resolve","setTimeout","fetch","response","ok","status","json","result","App","fetchQuotes","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.828d17ac.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction QuoteBox(props) {\r\n  return (\r\n    <div id=\"quote-box\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuoteBox;\r\n","import React from 'react';\r\n\r\nfunction QuoteControls(props) {\r\n  return (\r\n    <div id=\"quote-controls\">\r\n      {props.children}\r\n      <button\r\n        id=\"new-quote\"\r\n        type=\"button\"\r\n        onClick={props.handleClick}\r\n        disabled={props.busy} >{props.text}</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuoteControls;\r\n","import React from 'react';\r\n\r\nconst TWEET_URI = 'https://twitter.com/intent/tweet?';\r\n\r\nfunction getQueryString(obj) {\r\n  return Object.keys(obj).reduce((a, e) => {\r\n    a.push(`${e}=${obj[e]}`);\r\n    return a;\r\n  }, []).join(\"&\");\r\n}\r\n\r\nfunction getTweetLink(quote) {\r\n  const query = {\r\n    text: encodeURIComponent(`\"${quote.en}\" ${quote.author}.`),\r\n    url: window.location.href,\r\n    hashtags: encodeURIComponent(\"quotes, codingQuotes\"),\r\n    via: \"piouson_code\"\r\n  }\r\n  return `${TWEET_URI}${getQueryString(query)}`;\r\n}\r\n\r\nfunction TweetQuote(props) {\r\n  const link = getTweetLink(props.tweet)\r\n  return (\r\n    <div>\r\n      <a id=\"tweet-quote\" href={link} \r\n        target=\"_blank\" rel=\"noopener noreferrer\">\r\n        <i className=\"fab fa-twitter\"></i>\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TweetQuote;\r\n","import React from 'react';\r\n\r\nfunction Quote(props) {\r\n  return (\r\n    <blockquote>\r\n      <q id=\"text\">\r\n        {props.text}\r\n      </q>\r\n      <footer id=\"author\">\r\n        {props.author}\r\n      </footer>\r\n    </blockquote>\r\n  );\r\n}\r\n\r\nexport default Quote;\r\n","import React from 'react';\r\n\r\nfunction QuoteHeader(props) {\r\n  return (\r\n    <div id=\"quote-header\">\r\n      <h1>{props.text}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuoteHeader;\r\n","import { useState, useEffect, useCallback } from 'react';\r\n\r\nconst useSemiPersistentState = (key, initialState) => {\r\n  const [value, setValue] = useState(\r\n    JSON.parse(localStorage.getItem(key)) || initialState\r\n  );\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  }, [value, key]);\r\n\r\n  return [value, setValue]\r\n}\r\n\r\nconst useQuotesApi = () => {\r\n  const [quote, setQuote] = useSemiPersistentState('quote','');\r\n  const [url,] = useState(\r\n    'https://programming-quotes-api.herokuapp.com/quotes/random'\r\n  );\r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const fetchQuotes = useCallback(async () => {\r\n    setError('');\r\n    setIsLoading(true);\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      setError(`HTTP Error: Status: ${response.status}!`);\r\n    }\r\n    else {\r\n      const result = await response.json();\r\n      setQuote(result);\r\n    }\r\n    setIsLoading(false);\r\n  }, [url, setQuote]);\r\n\r\n  return [{quote, isLoading, error}, fetchQuotes]\r\n}\r\n\r\nexport default useQuotesApi;","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport QuoteBox from './QuoteBox';\r\nimport QuoteControls from './QuoteControls';\r\nimport TweetQuote from './TweetQuote';\r\nimport Quote from './Quote';\r\nimport QuoteHeader from './QuoteHeader';\r\nimport useQuotesApi from './api';\r\n\r\nfunction App() {\r\n  const [{quote, isLoading, error}, fetchQuotes] = useQuotesApi();\r\n\r\n  useEffect(() => {\r\n    if (!quote) {\r\n      fetchQuotes();\r\n    }\r\n  }, [quote, fetchQuotes]);\r\n\r\n  return (\r\n    <div id=\"App\">\r\n      <div id=\"container\">\r\n        <QuoteHeader text=\"Coding Quotes\" />\r\n        <QuoteBox>\r\n          {error && <p>{error}</p>}\r\n          {isLoading ? (\r\n            <p>Loading...</p>\r\n          ) : (\r\n            quote.en && (\r\n              <Quote\r\n                text={quote.en}\r\n                author={quote.author} />\r\n            )\r\n          )}\r\n        </QuoteBox>\r\n        <QuoteControls handleClick={fetchQuotes} busy={isLoading} text=\"New Quote\">\r\n          <TweetQuote tweet={quote} />\r\n        </QuoteControls>\r\n      </div>\r\n      <a id=\"creator\"\r\n        href=\"https://piouson.github.io/\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\">by piouson\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}